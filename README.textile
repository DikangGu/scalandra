h2. Scalandra

Cassandra client written in Scala. Scalandra uses the new Thrift api and should work on Cassandra 0.4-beta1 and newer. Scalandra can be built using either ant or "buildr":github.com/djspiewak/buildr/

Hugs and kisses,
Nodeta

h3. Usage example

h4. Client class

<pre><code>
import com.nodeta.scalandra._

val connection = Connection()
val client = new Client(connection, "Keyspace1", StringSerializer, StringSerializer, StringSerializer)

client.insertNormal(
  ColumnParent[String]("Standard1", "jsmith-test"),
  Map("first" -> "John",
      "last"  -> "Smith",
      "age"   -> "53"
  )
)

client.slice(ColumnParent[String]("Standard1", "jsmith-test"), None, None, Ascending)
  // returns inserted map

client.get(ColumnPath("Standard1", "jsmith-test", "age"))
  // returns Some("53")

client.get(ColumnPath("Standard1", "jsmith-test", "nonexistent"))
  // returns None

connection.close()
</code></pre>


h4. Map interface

Map interface is (currently) read-only. It can be used to access cassandra data using a scala Map interface. Using the previously inserted data:

<pre><code>
  import com.nodeta.scalandra._
  import com.nodeta.scalandra.mapping.StandardColumnFamily

  class Standard1(protected val connection : Connection) extends StandardColumnFamily[ String, String] {
    protected val keyspace = "Keyspace1"
    protected val columnFamily = "Standard1"
    protected val columnSerializer = StringSerializer
    protected val valueSerializer = StringSerializer
  }

  val c = Connection()
  val standard1 = new Standard1(c)

  // standard1 is a map containing all rows of column family Standard1
  standard1("jsmith-test")("first") // returns "John"

  // But also, slice actions exist
  standard1("jsmith-test").slice("age", "first")
    // returns Map("age" -> "53", "first" -> "John")

  c.close() // Remember to close connections!

</code></pre>

h4. Pool

Connections can also be managed using pools, e.g.

<pre><code>
import com.nodeta.scalandra._
import com.nodeta.scalandra.pool._

val pool = StackPool(ConnectionProvider("localhost",9160))

val connection = pool.borrow

// code here

pool.restore(connection)

</code></pre>

h3. Future development

* Write actions to Map interface
* Add support to apply a code block to pool which automatically handles borrowing and returning objects to and from pool.

h3. Running tests

To run tests, you must have a Cassandra instance running in localhost using the default configuration. Also, OrderPreservingPartitioner is required for some tests to pass. Your storage configuration should contain a Keyspace configured like this:

<pre>
  <code class="xml">
<Keyspace Name="Keyspace1">
  <KeysCachedFraction>0.01</KeysCachedFraction>
  <ColumnFamily CompareWith="UTF8Type" Name="Standard1" FlushPeriodInMinutes="60"/>
  <ColumnFamily CompareWith="UTF8Type" Name="Standard2"/>
  <ColumnFamily CompareWith="TimeUUIDType" Name="StandardByUUID1"/>
  <ColumnFamily ColumnType="Super" CompareWith="UTF8Type" CompareSubcolumnsWith="UTF8Type" Name="Super1"/>
</Keyspace>
  </code>
</pre>

Run tests using command @ant test@
